package Trees;

import java.util.Scanner;

public class BinarySearchTree {
	
	int value;
	public static node root;
	Scanner scan = new Scanner(System.in);
	
	class node {
		int data;
		node left;
		node right;
	}
	
	BinarySearchTree() {
		root = null;
	}
	
	void insertion() {
		node ptr = new node();
		System.out.print("Enter the data: ");
		value = scan.nextInt();
		
		ptr.data = value;
		ptr.left = null;
		ptr.right = null;
		
		if(root == null) {
			root = ptr;
		}
		
		else {
			node temp = root;
			while(true) {
				if(temp.data > ptr.data) {
					if(temp.left == null) {
						temp.left = ptr;
						break;
					}
					else {
						temp = temp.left;
					}
				}
				else {
					if(temp.right == null) {
						temp.right = ptr;
						break;
					}
					else {
						temp = temp.right;
					}
				}
			}
		}
		System.out.print("Record Inserted\n\n");
	}
	
	void deletion() {
		
	}
	
	void preOrderTraverse(node root) {
		if(root == null)
			return;
		
		System.out.print(root.data + " ");
		preOrderTraverse(root.left);
		preOrderTraverse(root.right);
	}
	
	void postOrderTraverse(node root) {
		if(root == null)
			return;
		
		postOrderTraverse(root.left);
		postOrderTraverse(root.right);
		System.out.print(root.data + " ");
	}
	
	void inOrderTraverse(node root) {
		if(root == null)
			return;
		
		inOrderTraverse(root.left);
		System.out.print(root.data + " ");
		inOrderTraverse(root.right);
	}
	
	void levelOrderTraverse() {
		
	}
	
	void searchNode() {
		System.out.print("");
	}

	public static void main(String[] args) {
		
		@SuppressWarnings("resource")
		Scanner scan = new Scanner(System.in);
		int ch = 0;
		BinarySearchTree binarySearchTree = new BinarySearchTree();
		
		while(ch != 8) {
			System.out.print("\n***************Operation on Binary Search Tree***************\n");
		    System.out.print("\n1. Insertion\n2. Deletion\n3. PreOrder Traverse");
		    System.out.print("\n4. PostOrder Traverse\n5. Inorder Traverse\n6. LevelOrder Traverse\n7. Search Node");
		    System.out.print("\n8. Exit");
		    System.out.print("\n\nEnter the choice:-");
		    ch = scan.nextInt();
		    
		    switch(ch) {
		    	case 1:
		    		binarySearchTree.insertion();
		    		break;
		    	case 2:
		    		binarySearchTree.deletion();
		    		break;
		    	case 3:
		    		System.out.print("PreOrder Traverse: ");
		    		binarySearchTree.preOrderTraverse(root);
		    		System.out.println("\n");
		    		break;
		    	case 4:
		    		System.out.print("PostOrder Traverse: ");
		    		binarySearchTree.postOrderTraverse(root);
		    		System.out.println("\n");
		    		break;
		    	case 5:
		    		System.out.print("InOrder Traverse: ");
		    		binarySearchTree.inOrderTraverse(root);
		    		System.out.println("\n");
		    		break;
		    	case 6:
		    		binarySearchTree.levelOrderTraverse();
		    		break;
		    	case 7:
		    		binarySearchTree.searchNode();
		    		break;
		    	case 8:
		    		System.exit(0);
		    		break;
		    	default: System.out.print("\nPlease enter valid choice\n\n");
		    }
		}

	}

}
