package Problems;

import java.util.Stack;

public class LongestValidParentheses3 {
	
	static public int longestValidParentheses(String s) {
		
		/*int length = 0;
		Stack<Integer> stack = new Stack<Integer>();
		stack.push(-1);
		
		for(int i = 0; i < s.length(); i++) {
			if(s.charAt(i) == '(')
				stack.push(i);
			else {
				stack.pop();
				if(stack.isEmpty()) 
					stack.push(i);
				else 
					length = Math.max(length, i - stack.peek());
			}
		}
		return length;*/
		
		int length = 0, openBracket = 0, closeBracket = 0;
		
		for(int i = 0; i < s.length(); i++) {
			if(s.charAt(i) == '(')
				openBracket++;
			if(s.charAt(i) == ')')
				closeBracket++;
			if(openBracket == closeBracket)
				length = Math.max(length, openBracket + closeBracket);
			if(closeBracket > openBracket)
				openBracket = closeBracket = 0;
		}
		
		openBracket = 0; 
		closeBracket = 0;
		for(int i = s.length() - 1; i >= 0; i--) {
			if(s.charAt(i) == '(')
				openBracket++;
			if(s.charAt(i) == ')')
				closeBracket++;
			if(openBracket == closeBracket)
				length = Math.max(length, openBracket + closeBracket);
			if(openBracket > closeBracket) 
				openBracket = closeBracket = 0;
		}
		return length;
	}

	public static void main(String[] args) {
		
		String s = "(()(()))())))())))(((()(())))(()())((())((()()()("
				+ "())))))()(())))())))(())())())((())))((((()))((())"
				+ "()))()(()()(())))())())))()))(()()((()(())()))((()"
				+ ")(((()()()(((())((()()((())()))(()(())))()()))(()("
				+ ")))))))))((()())((((())(())())((())((()))))((()()("
				+ "())()))()())((()((()))(()((())()()))((()()(()(()(("
				+ "())))()((())((()))()(()))())(()()())())()())(()())"
				+ ")))((()())(())()((()))(()(((())()(())))(())())))()"
				+ "))())))()()((()(((()(())(())))((()))())())()))))))"
				+ ")((()(((())(())))(((())(()((()))))))())())()((()()"
				+ "((()()(())((()(((()((()())(()())()()()))()(()(()(("
				+ ")(((((()()))(((()))(()((()((((((()())(()))())((())"
				+ ")())()())()((()))())))()(()(()()))()((())())((()(("
				+ "())(()((())((()))))((((((((())()())))()))())((())("
				+ "))())()()())))))(()))()())(())(((((())((()))((()()"
				+ "())()))))(())))))(()(((((((())((()((()))((())((((("
				+ "))))))))))()))))))(()(())))))((()))(()))(()))((()("
				+ "(())((()(()((()(())(()()())())()))()())()(()))))(("
				+ ")())()()))(()())))(()))))((()()))(()()()())))))(()"
				+ ")()()(((()()()()((())(()()())(((()(()((((()(())())"
				+ "))()(((()(()())))())())(()))()))())())(()()()()()("
				+ "))())(())((((())((((((((((()())()))())))())())))))"
				+ ")()(()((((((()))))))()())((()())())(()())()()()))("
				+ "())()(()(()()))()))(((()(((())())()((())()))(()()("
				+ "(((())()))))(()(((())((())(())())()))((())(())())("
				+ ")(()()(())()())(()()))())()))()())()((()(((()((()("
				+ ")(()())))))()(()((((((((()())))(()(()))((((()())))"
				+ ")))))((()()(()(())(()())(((()))(())))))())(((((()("
				+ "(())())()())()()())()())()())))((()(()()))(((()()("
				+ "(())())((()(()(()())(((((()()(())))))())(())(())(("
				+ ")(()))(())()()))(()))(())()())((((())()())())))))("
				+ ")(())))()(())(())))((()()()((())()(())(()((((()))("
				+ "))())()(()()())()())()(()(()(()))(()(()()((())(()("
				+ "))))(((()(())()())(())()))(())()))())())((((()()(("
				+ ")))())))))))(((()))(()(()()))))))))((()))(()((()))"
				+ "(((((()()()))((((()()(()())((()(())))())(((()(()()))(((())()))((";
		//String s = ")()())";
		System.out.println(longestValidParentheses(s));

	}

}
