package Problems;

import java.util.Stack;

public class LongestValidParentheses2 {
	
	static private Boolean validate(String str) {
		
		Stack<Character> stack = new Stack<Character>();
		for(char ch : str.toCharArray()) {
			if(ch == ')') {
				char topElement = stack.isEmpty() ? '#' : stack.pop();
				if(topElement != '(')
					return false;
			}
			else
				stack.push(ch);
		}
		return stack.isEmpty();
	}
	
	static public int longestValidParentheses(String s) {
		
		int length = 0;
		/*length = s.length();
		if(length % 2 != 0)
			length--;
		while(length != 0) {
			for(int i = 0; i < s.length(); i++) {
				if(i + length <= s.length()) {
					String str = s.substring(i, i + length);
					//System.out.println("HI " + str.length());
					//System.out.println(str);
					if(validate(str)) {
						return str.length();
					}
				}
				else 
					break;
			}
			length = length - 2;
		}*/
		for(int i = 0; i < s.length(); i++) {
			if(s.charAt(i) == ')') 
				for(int j = 0; j < i; j++) {
					String str = s.substring(j, i + 1);
					if(str.length() % 2 == 0) 
						if(validate(str)) 
							if(str.length() >= length) 
								length = str.length();
				}
		}
		return length;
	}

	public static void main(String[] args) {
		
		String s = "(()(()))())))())))(((()(())))(()())((())((()()()("
				+ "())))))()(())))())))(())())())((())))((((()))((())"
				+ "()))()(()()(())))())())))()))(()()((()(())()))((()"
				+ ")(((()()()(((())((()()((())()))(()(())))()()))(()("
				+ ")))))))))((()())((((())(())())((())((()))))((()()("
				+ "())()))()())((()((()))(()((())()()))((()()(()(()(("
				+ "())))()((())((()))()(()))())(()()())())()())(()())"
				+ ")))((()())(())()((()))(()(((())()(())))(())())))()"
				+ "))())))()()((()(((()(())(())))((()))())())()))))))"
				+ ")((()(((())(())))(((())(()((()))))))())())()((()()"
				+ "((()()(())((()(((()((()())(()())()()()))()(()(()(("
				+ ")(((((()()))(((()))(()((()((((((()())(()))())((())"
				+ ")())()())()((()))())))()(()(()()))()((())())((()(("
				+ "())(()((())((()))))((((((((())()())))()))())((())("
				+ "))())()()())))))(()))()())(())(((((())((()))((()()"
				+ "())()))))(())))))(()(((((((())((()((()))((())((((("
				+ "))))))))))()))))))(()(())))))((()))(()))(()))((()("
				+ "(())((()(()((()(())(()()())())()))()())()(()))))(("
				+ ")())()()))(()())))(()))))((()()))(()()()())))))(()"
				+ ")()()(((()()()()((())(()()())(((()(()((((()(())())"
				+ "))()(((()(()())))())())(()))()))())())(()()()()()("
				+ "))())(())((((())((((((((((()())()))())))())())))))"
				+ ")()(()((((((()))))))()())((()())())(()())()()()))("
				+ "())()(()(()()))()))(((()(((())())()((())()))(()()("
				+ "(((())()))))(()(((())((())(())())()))((())(())())("
				+ ")(()()(())()())(()()))())()))()())()((()(((()((()("
				+ ")(()())))))()(()((((((((()())))(()(()))((((()())))"
				+ ")))))((()()(()(())(()())(((()))(())))))())(((((()("
				+ "(())())()())()()())()())()())))((()(()()))(((()()("
				+ "(())())((()(()(()())(((((()()(())))))())(())(())(("
				+ ")(()))(())()()))(()))(())()())((((())()())())))))("
				+ ")(())))()(())(())))((()()()((())()(())(()((((()))("
				+ "))())()(()()())()())()(()(()(()))(()(()()((())(()("
				+ "))))(((()(())()())(())()))(())()))())())((((()()(("
				+ ")))())))))))(((()))(()(()()))))))))((()))(()((()))"
				+ "(((((()()()))((((()()(()())((()(())))())(((()(()()))(((())()))((";
		//String s = ")()())";
		System.out.println(longestValidParentheses(s));
	}
}
